[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nikhil Shah",
    "section": "",
    "text": "This is my website. It currently contains two data visualization exercises."
  },
  {
    "objectID": "tuesday1.html",
    "href": "tuesday1.html",
    "title": "Lichess.org",
    "section": "",
    "text": "This analysis uses data from the October 1, 2024 TidyTuesday.\nThis is a dataset of 20,058 online chess games. The data was collected and cleaned from Lichess.org by Kaggle/Mitchell J. It includes extensive data on each game including each move used, both players’ usernames and ratings, and the time of the game.\n\n# adds a column that isolates the opening move of each game, and orders it by how common each move is\nchess &lt;- chess |&gt;\n  mutate(\n    opening_move = ifelse(\n      str_sub(moves, 1, 1)=='N', \n      str_sub(moves, 1, 3), \n      str_sub(moves, 1, 2)\n      )\n    ) |&gt;\n  mutate(\n    opening_move = fct_infreq(opening_move)\n    )\n\n# creates a bar plot that shows the frequency of opening moves\nchess |&gt;\n  ggplot() +\n  geom_bar(aes(x = opening_move)) +\n  labs(\n    x = 'Opening Move',\n    y = 'Number of Games',\n    title = 'Frequency of opening moves for white on Lichess.com'\n  )\n\n\n\n\n\n\n\n\nThis bar plot shows the frequency of initial moves in the dataset. e4 and d4 make up almost all of them. While knight to f3 is the third most popular, almost none of the games use knight to a3.\n\n\n# A tibble: 20 × 3\n   opening_move count proportion\n   &lt;fct&gt;        &lt;int&gt;      &lt;dbl&gt;\n 1 e4           12598    62.8   \n 2 d4            4522    22.5   \n 3 Nf3            725     3.61  \n 4 c4             716     3.57  \n 5 e3             416     2.07  \n 6 g3             186     0.927 \n 7 b3             173     0.862 \n 8 f4             166     0.828 \n 9 d3             131     0.653 \n10 Nc3             99     0.494 \n11 b4              88     0.439 \n12 c3              56     0.279 \n13 g4              38     0.189 \n14 h4              33     0.165 \n15 a4              28     0.140 \n16 a3              27     0.135 \n17 f3              23     0.115 \n18 Nh3             15     0.0748\n19 h3              14     0.0698\n20 Na3              4     0.0199"
  },
  {
    "objectID": "tuesday2.html",
    "href": "tuesday2.html",
    "title": "National Park Species",
    "section": "",
    "text": "This analysis uses data from the October 8, 2024 TidyTuesday.\nThis is a dataset of species in American national parks, specifically the 15 most visited. The data is sourced from NPSpecies, a tool maintained by the National Park Service (NPS)’s Integrated Resource Management Applications (IRMA). It includes taxonomy information and other characteristics like sensitivities and rarity for each species found in each park.\n\nspecies &lt;- species |&gt;\n  filter(Family == 'Mustelidae') |&gt;\n  mutate(ParkName = str_replace(ParkName, ' National Park', '')) |&gt;\n  mutate(ParkName = fct_infreq(ParkName))\n\nspecies |&gt;\n  ggplot() +\n  geom_bar(aes(y = ParkName)) +\n  labs(\n    x = 'National Park',\n    y = '# Species',\n    title = 'Distinct species in family Mustelidae 15 national parks'\n  )\n\n\n\n\n\n\n\n\nThis data displays the number of mustelid (weasels, badgers, otters) species in each of the 15 most visited national parks. This is because mustelids are my favorite taxon. I would have included my second-favorite taxon, pinnipeds (seals, sea lions, walruses), however I discovered there are none in any of the listed parks. The only conclusion I draw from this is that more people should visit Alaskan national parks.\n\n\n# A tibble: 15 × 2\n   ParkName              count\n   &lt;chr&gt;                 &lt;int&gt;\n 1 Glacier                   9\n 2 Grand Teton               9\n 3 Yellowstone               8\n 4 Yosemite                  8\n 5 Acadia                    7\n 6 Great Smoky Mountains     7\n 7 Olympic                   7\n 8 Rocky Mountain            7\n 9 Indiana Dunes             6\n10 Cuyahoga Valley           5\n11 Grand Canyon              4\n12 Bryce Canyon              3\n13 Hot Springs               3\n14 Zion                      3\n15 Joshua Tree               2"
  },
  {
    "objectID": "project2.html",
    "href": "project2.html",
    "title": "Palindromes",
    "section": "",
    "text": "Data\nThe dataset is English Words by dwyl (Github). It contains almost all of the words in the English dictionary\nIt also contains many things that are decidedly not words.\n\n\n\ncategory\nexample\nthing to filter out\n\n\n\n\nhas number\n1080\ndigits\n\n\nhas symbol\nA&P\nsymbols\n\n\nproper noun\nAbdul\ncapitals\n\n\ninitialism\nA.I.\ncapitals, periods\n\n\ncontractions\naren’t\napostrophes\n\n\npossessives\nabbot’s\napostrophes\n\n\ncompounds\nable-bodied\nhyphens\n\n\n\nI ended up filtering out any word that doesn’t have a vowel from the list of palindromes as well. While there are some vowel-less words that are valid words, it’s hard to argue that “m” or “tgt” or “xxx” are among them.\n\nwords_filtered &lt;- words |&gt;\n  rename('word' = X2) |&gt;\n  filter(!str_detect(word, '[[:upper:][:punct:]\\\\d]')) |&gt;\n  mutate(length = str_length(word)) |&gt;\n  mutate(start= str_sub(word, 1, 1))\n  \nsample_n(words_filtered, 10)\n\n            word length start\n1  unversatilely     13     u\n2         probed      6     p\n3         bedlar      6     b\n4       septated      8     s\n5   intelligence     12     i\n6     dogcatcher     10     d\n7       shoemold      8     s\n8        cracker      7     c\n9      phocomeli      9     p\n10       softner      7     s\n\n\n\n\nPalindromes\nA palindrome is any word (or set of words) that is the same when the letters are reversed.\n\npalindromes &lt;- words_filtered |&gt;\n  filter(word == stri_reverse(word)) |&gt;\n  filter(str_detect(word, '[aeiouy]'))\n\nsample_n(palindromes, 10)\n\n      word length start\n1    kayak      5     k\n2    dewed      5     d\n3      umu      3     u\n4      ihi      3     i\n5      gig      3     g\n6    refer      5     r\n7  sememes      7     s\n8    addda      5     a\n9      aga      3     a\n10      ii      2     i\n\n\nA lot of palindromes are formed because of common suffixes. ‘Deified’, ‘reviver’, and ‘stats’ might be palindromes, but only because of a modifier that changes the root word. This shows how many words follow those structures.\n\npalindromes &lt;- palindromes |&gt;\n  mutate(suffix = ifelse(str_detect(word, \"\\\\b(de|re|ro|s)\\\\w+(ed|er|or|s)\\\\b\"), 'Yes', 'No'))\n\npalindromes |&gt;\n  ggplot(aes(fill = suffix, x = length)) +\n  geom_bar() +\n  labs(\n    x = 'Word Length',\n    y = '# of Palindromes',\n    title = 'Single-Word Palindromes in English'\n  )\n\n\n\nAnti-Palindromes, or Reduplications\nWhile trying to work out a way to find palindromes with stringr functions (apparently R does not have reverse indexing like Python does so this is either not possible or very convoluted) I accidentally came up with a list of “anti-palindromes”, where the back half of the word is also the front half of the word. If “toot” is a palindrome, “toto” is an anti-palindrome.\n\nreduplications &lt;- words_filtered |&gt; \n  filter(str_sub(word, 1, floor(str_length(word)/2)) == str_sub(word, -ceiling(str_length(word)/2), -1))\n\nwords_letters &lt;- words_filtered |&gt;\n  group_by(start) |&gt;\n  summarize(count_total = n()) |&gt;\n  mutate(\"All English Words\" = count_total/sum(count_total)*100)\n\nreduplication_letters &lt;- reduplications |&gt;\n  group_by(start) |&gt;\n  summarize(count_red = n()) |&gt;\n  mutate(\"Anti-Palindromes\" = count_red/sum(count_red)*100)\n\nletters &lt;- words_letters |&gt;\n  left_join(reduplication_letters)\n\nJoining with `by = join_by(start)`\n\nletters_long &lt;- letters |&gt;\n  pivot_longer(cols = c(\"All English Words\", \"Anti-Palindromes\"), names_to = 'dictionary', values_to = 'percent') \n\nletters_long |&gt;\n  ggplot(aes(fill = dictionary, x = start, y = percent)) +\n  geom_bar(position = 'dodge', stat = 'identity') +\n  labs(\n    x = 'Letter',\n    y = 'Frequency (%)',\n    title = 'Starting Letters of Anti-Palindromes'\n  )\n\n\n\n\n\n\n\n\nInterestingly, a lot of these anti-palindromes, or reduplications, start with uncommon letters. This could because many of those letters are emphatic consonant sounds that sound more interesting when repeated. Examples include beriberi, yoyo, and pompom."
  }
]